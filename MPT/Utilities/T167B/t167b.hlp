** --------------------------------------------------------------------------
**
** 		     ИНСТРУМЕНТАЛЬНАЯ СИСТЕМА T167B
**
**                               V 2.1
**
**                     совместима с HEX машинами
**
**			v 1.0, HEX201-01,02 и 03
**
** --------------------------------------------------------------------------
** LMT ltd
**
** e-mail: kluchev@d1.ifmo.ru
** URL:    http://lmt.cs.ifmo.ru
** --------------------------------------------------------------------------
**  			      СПИСОК ФАЙЛОВ
**
** T167B.EXE	- Инструментальная система t167b
** T167B.MAC	- Файл для клавиатурных макросов (не обязателен)
** T167.INI	- Командный файл исполняющийся автоматически при старте
**		  системы (не обязателен)
** HISTORY.INI	- Файл истории консольного ввода (создается сам, если
** 		  его изначально нет или не совпал CRC)
**
** --------------------------------------------------------------------------
**
**                           КРАТКОЕ ОПИСАНИЕ
**
** --------------------------------------------------------------------------
**  Инструментальная система T167B призвана решать следующие здачи:
**
**  - Преобразование HEX и BIN файлов
**  - Контроль качества HEX файлов
**  - Анализ HEX файлов
**  - Передача загрузочных модулей различных форматов в целевую систему
**    с протоколами разного уровня сложности
**  - Получение информации из целевой системы
**  - Обеспечение элементарных операций с последовательным каналом
**    (прием и передача байта, эмуляция терминала)
**  - Обеспечение быстрой адаптации к целевой системе
**  - Обеспечение средств описания эксперимента при отладке
**
** В инструментальной  системе T167B использована стековая  машина близкая
** по характеристикам  к форт-системам  в стандарте  FORT-83. В  настоящей
** версии отсутствует режим компиляции, практически отсутствуют  механизмы
** для  организации  ветвления  программы  и  зацикливания.  Есть   только
** примитивное  средство  для  условного  исполнения  (команда  if{  )   и
** оператор  цикла  do{.   Эти  команды  работают   на  уровне   текстовой
** интерпретации в рамках одной строки.
**
** Элемент стека данных - 16-ти разрядное целое число без знака. Текстовый
** интерпретатор использует  фортовский алгоритм  на основе  слова Word. В
** отличии от форта  слово Interpret допускает  рекурсию глубиной 20  (для
** build 603), что позволяет производить вложенную интепретацию  большого
** количества   файлов.    Этот   механизм    призван   хотябы    частично
** компенсировать отсутствие определяющих слов ":" и "CREATE".
**
** Перед  разработчиком   инструментальной  системы   не  ставилась   цель
** обеспечения t167B полноценным языком программирования. Пакет T167 можно
** рассматривать  как  набор  модулей  или  библиотеку  для  объединения в
** едином стиле совместных наработок на языке "C".
**
** -------------------- ОСНОВНЫЕ ОСОБЕННОСТИ T167 ---------------------------
**
** АВАРИЙНЫЙ ВЫХОД (CTRL+BREAK) приводит к корректному завершению работы
** T167b при зависаниях в большинстве случаев.
**
** Выход в DOS - Alt+X
**
** Командная строка в T167b имеет историю, записываемую в файл.
** Перелистывание команд осуществляется стрелками Up,Down.
**
** --------------------------------------------------------------------------
**			      ОБОЗНАЧЕНИЯ
** --------------------------------------------------------------------------
**
** В скобках указано положение числовых параметров на стеке данных.  Перед
** стрелкой  до  выполнения  команды  и  за стрелкой соответственно после.
** После  скобок  указан  перечень   строковых  констант  (например   имен
** файлов).
**
**
**                  Пример обозначения:
**
** PRIMER		   (a,b,c->d) test.txt
**
**		   Вызов команды PRIMER осуществляется следующим способом:
**                  a b c primer test.txt
**
**		   a,b,c,d... 	- числовые значения,
**   				  16-ти разрядные без знака
**		   char		- ASCII символ
**                  word		- слово, перечень ASCII символов не
**                                 содержащих пробел
**                  filename     - имя файла с расширением (8 символов)
**                  Addr         - младшая часть адреса
**                  HLA          - старшая часть 32-х разрядного
**                                 линейного адреса
**                  len          - длина
**
** --------------------------------------------------------------------------
**
** 		   	КРАТКИЙ ПЕРЕЧЕНЬ КОМАНД
**

BYE                 (->)
                             Выход из T167b

                             пример: bye
#

.TITLE              (->)
                             Выдача номера версии

                             пример: .title
#

+                   (a,b->c)
                             Сложение c=a+b

                             Пример: 2 3 +
#

-                   (a,b->c)
                             Вычитание c=a-b

                             Пример:  5 2 -
#

*                   (a,b->c)
                             Умножение c=a*b

                             Пример: 2 2 *
#

/                   (a,b->c)
                             Деление c=a-b

                             Пример: 6 2 /
#

WORDS               (->)
                             Выдача списка слов

                             пример: words
#

.                   (->a)
                             Распечатка числа в десятичном формате

                             пример: 2 2 + .
#

S.                  (->)
                             Распечатка содержимого стека

                             пример: s.
#

LFILE               (->) filename.ext

                             Интерпретация командного файла

                             пример: lfile test.t
#

CR                  (->)
                             Перевод строки

                             пример: cr

#

H.                  (a->)
                             Распечатка слова в HEX виде

                             пример: h.
#

CREATEHELP          (->) filename.ext

                             Создание файла со списком команд T167b

                             пример: createhelp t167_1.hlp
#

ABORT               (->)
                             Аварийное прекращение работы программы

                             пример: abort
#

RESETABORT          (->)
                             Сброс аварийного прекращения

                             пример: resetabort
#


?ABORT              (->)     Проверка и выход в ДОС при наличии ABORT

                             пример: ?abort
#

OPENCHANNEL         (com,baud->)

                             Включение COM порта:
			     На стек кладется номер COM (1..6) и
			     константа скорости (12 для 9600 бит/сек)

			     Номера COM:

			     COM1(IRQ4.3F8) стандартные
			     COM2(IRQ3.2F8)
			     COM3(IRQ4.3E8)
			     COM4(IRQ3.2E8)

			     COM5(IRQ5.2F8) нестандартные
			     COM6(IRQ7.3F8)

			     Константы скорости:

			     24: 4800 бит/сек
			     12: 9600 бит/сек
		 	     6:  19200 бит/сек
			     3:  38400 бит/сек
			     2:  57600 бит/сек
			     1:  115200 бит/сек

                             пример: 2 12 openchannel
#

OPENCHANNELRTS       (com,baud->)
			     Аналогична команде openchannel
			     Отличие: включает сигнал RTS.

#

CLOSECHANNEL        (->)
                             Выключение COM порта

                             пример: closechannel
#

RSIO                (->a)
                             Чтение байта из COM порта

                             пример: rsio .
#

WSIO                (a->)
                             Запись байта в COM порт

                             пример: 42 wsio
#

TERM                (w->)
                             Включение эмулятора терминала
			     0 - бинарный
			     1 - hex
			     2 - десятичный

                             пример: 1 term
#

BOOT                (len->) bootload.bin loader.bin

                             Bootstrap загрузка для C167

                             пример: 256 boot boot.bin loader.bin
#

LOAD                (len->) filename.ext

			     Загрузка файла фиксированной длины
                             в контроллер. Протокол не поддерживается.

                             пример: 1024 load test.bin
#

DIR                 (->) *.*

                             Вывод каталога файлов

                             пример: dir *.hex
#

LS                  (->) *.*

                             Синоним команды DIR

                             пример: ls *.*
#

WAITCHAR            (->) char

                             Ожидание символа из COM

                             пример: waitchar *
#

HB166               (->) file1.hex file2.bin

                             HEX - BIN преобразователь для 64К.

                             пример: hexbin file.hex file.bin
#

--                  (->)     Комментарий до конца строки

                             пример: 0 term -- это комментарий
#

//                  (->)     Комментарий до конца строки

                             пример: 0 term // это комментарий
#

RUN{                (->) word1 word2 ... wordn }

                             Запуск программы ДОС с параметрами (до '}')

                             пример: run vc
#

LSHTM               (->) *.* filename.htm

                             Программа преобразования списка файлов
			     в HTML формат

                             пример: lshtm *.c file.htm
#

LOADFLEX            (->) filename.ext

                             Загрузка больших файлов в контроллер без
			     поддержки каких либо протоколов. Длина файла
			     не ограничена.

                             пример: loadflex test.bin
#

LOADHEX             (->) filename.hex

			     Загрузка файла в HEX формате. В контроллере
			     должна быть HEX машина.
                             пример:
#

SETBREAK            (->)
                             Установка разрыва на линии COM

                             пример:
#

CLRBREAK            (->)
			     Снятие разрыва на линии COM
                             пример:
#

ADDHEXSTART         (Addr,HLA->) fiename.hex

			     Добавление стартового адреса в конец
			     HEX файла

                             пример: 0 0x10 addhexstart test.hex
#

?                   (->)
                             Выдача полной справки

                             пример: ?
#

/H                  (->)     Выдача полной справки

                             пример: /h
#

PAUSE               (->)     Выдача надписи об ожидании нажатия

                             пример: pause
#

SETTIMEOUT          (w->)    Установка таймаута для COM в мс

                             пример: 0x200 settimeout
#

GETTIMEOUT          (->)     Распечатка текущего значения таймаута COM

                             пример: gettimeout
#

TABVECT             (seg,begadr,n->)  Генерация таблицы векторов для C167
                             ( n штук от 0)

                             пример: 0 0xe600 0x80 tabvect
#

SENDHEXBLOCK        (w,w->)  Передача одного HEX блока в контроллер
			     Поле данных отсутствует

			     Adr Com

                             пример: 0x1000 1  sendhexblock
#

SENDHEXBLOCKW      (w,w,w->) Передача одного HEX блока в контроллер
			     Поле данных (Word) - 2 байта

			     Adr Com Word

                             пример: 0x1000 1 0x1234 sendhexblockw
#

HELP                (->)     Выдача справки по одному слову

                             пример: help bye
#

ADDHELP             (->)     Создать файл новых команд, не
			     вошедших в текущий файл справки (t167b.hlp)

                             пример: addhelp new.hlp
#

WIN                 (->)     Переход в оконный режим

                             пример: win
#

BIN2HEX             (w,w->)  Преобразование BIN файла в HEX
                             Adr HLA bin2hex binfile.ext hexfile.ext

                             пример: 0 0x10 bin2hex file.bin file.hex
#

DOCUMALL            (->)     Документатор программ

                             пример: documall *.c
#

SYSINFO             (->)     Выдача системной информации о T167b
                             пример:
#

MKDATE              (w->)    Создание файла с порядковым номером  трансляции
                             Таблица с вариантами выходных файлов. 
                             (++ обозначает, что производится инкремент 
                             порядкового номера трансляции (Build))
     0   ++    - printf("20-08-1999 16:20 Build 1 ");
     1   ++    - cprintf("20-08-1999 16:20 Build 2 ");
     2   ++    - printf("20-08-1999 16:20 Build 3 ");
     	   	 Build=3;
     3   ++    - cprintf("20-08-1999 16:20 Build 4 ");
	   	 Build=4;
     4   ++    - '20-08-1999 16:20 Build 5 '
     5   ++    - Type("20-08-1999 16:20 Build 6 ");
     6         - 	Build=6;
     7         - *** Релиз: 20-08-1999 16:20 Build 6 v 3.1
     8         - Build: 20-08-1999 16:20 Build 6 v 3.1
     9   ++    - Mkdate	DB	13,10,'20-08-1999 16:20 Build 7',0
     10        - Build: 20-08-1999 16:20 Build 7
     11  ++    - BUILD_ID    DT 0x08,0x00
                 VER_COMMENT DT "20-08-1999 16:20 Build 8 ");
                             пример: 0 mkdate mkdate.h
#

GETHEXFILE          (->)     Прием Hex файла из контроллера. Контроллер
			     должен находится в режиме монитора
                             (выдавать точки)

                             пример: gethexfile test.hex
#

TYPE                (->)     Распечатка файла на экране (как есть)

                             пример: type test.c
#

HEXDUMP             (->)     Преобразование HEX файла в обычный DUMP.
			     Вывод DUMP'а производится на экран. С помощью
			     функции +ECHO можно произвести запись на диск.

                             пример: hexdump test.hex
#

+ECHO               (->)     Включение режима копирования консольного
			     вывода в файл echo.txt

                             пример: +echo
#

-ECHO               (->)     Выключение режима копирования консольного
			     вывода в файл echo.txt

                             пример: -echo
#

SETMODETERM         (w->)    Изменение на "лету" режима работы
                             эмулятора терминала. Используется только
                             в файле t167b.mac

			     0 - бинарный
			     1 - hex
			     2 - десятичный

                             пример: 0 setmodeterm
#
CONTEXT              (a->)
			     Переключение контекста. Команда влияет на
			     количество слов выдаваемых командой WORDS.

			     ALL   0 - все команды
			     FORTH 1 - команды относящиеся к FORTH
			     INST  2 - инструментальные команды
			     SYS   3 - системные команды
			     COM   4 - команды для работы с COM
			     USER  5 - перечень команд определяемых
                                       пользователем

			     Пример: 0 context
#

TYPECONTEXT          (->)    Выдача информации о текущем контексте

			     Пример: typecontext
#

ALL                  (->)    Переключение в контекст ALL   (см. CONTEXT)

			     Пример: all
#

FORTH                (->)    Переключение в контекст FORTH (см. CONTEXT)

			     Пример: forth
#

INST                 (->)    Переключение в контекст INST  (см. CONTEXT)

			     Пример: inst
#
COM                  (->)    Переключение в контекст COM   (см. CONTEXT)

			     Пример: com
#
SYS                  (->)    Переключение в контекст SYS   (см. CONTEXT)

			     Пример: sys
#
USER                 (->)    Переключение в контекст USER  (см. CONTEXT)

			     Пример: user
#
."                   (->) word1 word2 ..."
			     Вывод строки на экран (до символа ")
			     Пример: ." hello World"
#
(                    (->) word1 word2 ...)
                             Комментарий до символа ")" (в пределах одной
			     строки.

			     Пример: 256 load ( 0 term)
#
INPUT                (->a)   Ввод 16-ти разрядного
                             десятичного числа без знака
#
DUP                  (a->a,a)
			     Дублирование верхнего элемента стека
#
SWAP                 (a,b->b,a)
			     Замена двух верхних элементов стека местами
#

DROP                 (a->)   Сброс верхнего элемента стека
#

KEY                  (->a)   Ввод ASCII кода нажатой клавиши
#
IF{                  (a->) word1 word2 ...}
                             Условный оператор. Если на стеке истина (не 0)
			     производится интерпретация выражения в скобках
			     пример: 1 if{ ." Истина"}
#
DO{                  (a->) word1 word2 ...}
			     Оператор цикла. Число на стеке определяет
			     количество выполнений выражения в скобках

			     пример: 10 do{ ." Цикл"}
#
I                    (->a)   Счетчик цикла do{

			     пример: 10 do{ cr ." Счетчик I = " I .}
#
C!                   (a,addr->)
			     Запомнить байт a по адресу Addr в адресном
			     пространстве FORTH системы

			     Пример: 10 0x80 c!
#

C@                   (Addr->a)
			     Получить байт a находящийся по адресу Addr

			     Пример: 0x80 c@
#
DUMP                 (Addr,Len->)
			     Распечатать Dump памяти FORTH системы

			     Пример: 0x80 10 dump
#

=                    (a,b->c)
			     Сравнение а и b. Результат сравнения c -
			     "истина" (не 0) если равно

			     Пример: 2 1 =
#

<>                   (->)
			     Сравнение а и b. Результат сравнения c -
			     "истина" (не 0) если не равно

			     Пример: 2 1 =

#
NOT                  (a->b)
			     Побитовая опреация NOT

			     Пример: 0x1 NOT
#

>                    (a,b->c)
			     Сравнение а и b. Результат сравнения c -
			     "истина" (не 0) если a больше b

			     Пример: 2 1 >

#
<                    (a,b->c)
			     Сравнение а и b. Результат сравнения c -
			     "истина" (не 0) если a меньше b

			     Пример: 2 1 <
#
CHAR                 (->) char
			     Положить на стек код следующего во входном
			     потоке ASCII символа

			     Пример: char *
#
EMIT                 (a->)   Вывод символа на экран.

			     Пример: 0x2A emit

#
USER{                (->) word1 word2 ...}
			     Определение списка слов входящих в
			     пользовательский контекст USER. Действует в
			     рамках одной строки.

			     Пример: user{ words key emit . drop}
#
CR+                  (->)
			     Переключить эмулятор терминала в "Unix" режим.
			     При этом к коду  LF добавляется код CR.

#
CR-                  (->)
			     Выключить "Unix" режим эмулятора терминала.

#
INCBAUD              (->)
			     Выбрать из списка скоростей обмена очередную,
			     большую и установить ее.
#
DECBAUD              (->)
			     Выбрать из списка скоростей обмена очередную,
			     меньшую и установить ее.

#
SCANBAUD             (->)
			     Подобрать скорость обмена (от контроллера
			     должен приходить символ (.).
#
BOX                  (->)
			     Переключить терминальный вывод в дополнительное
			     окно.
#
CLOSEBOX             (->)
			     Закрыть дополнительное окно.
#
MAKEBIOS             (a->) filename.ext

                             Генерация файла с точками входа в BIOS.

                             a=1 Siemens C167, KEIL SoftWare
                             a=2 Intel MCS196, BSO Tasking
                             a=3 Intel MCS51,  Avocet Systems Inc.

                             Пример: 1 makebios test.mak
#
MENU                 (->)
                             Вывод пользовательского меню на экран
#
ADDMENUITEM{         (->)
                             добавление строки в меню
#
ADDMENUCOM{          (->)
                             добавление команд в меню
#
LENFILE              (->Len) filename.ext
                             дать длину файла

#
LOADS                (->) filename.ext

                             загрузить файл в контроллер в формате
                             <S><LenFile><Data>

#
HB32                 (->) filename.hex filename.bin

                             HEX - BIN преобразователь.

                             пример: hexbin file.hex file.bin

#
RUN[                 (->) word .. word ]
#
RUNP[                (->) word .. word ]
#
LOADHEX+             (->) filename.hex
                             Hex загрузка (с +)
#
SENDREADHEX          (LLA, HLA, HLEN, LLEN ->)
                             Инициация выкачивания HEX массива из контроллера
#
OPENCHANNELDTR       (->) Тоже, что и OPENCHANNELRTS
#
MKPID                (w->c:\pid.dat pid.h)    Сздание файла с
                                идентификатором производителя

                             0 prinf        3 cprintf
                             1 cprintf      4 в кавычках
                             2 printf       5 Type

                             Формат файла PID.DAT

                             struct { int ID;
                                      char Name[4] }

                             ID   - номер компьютера
                             NAME - ASCIIZ инициалы программиста (3
                                    символа и 0)

                             пример: 0 mkpid u:\pid\pid.dat pid.h
#
SENDHEX              (Addr, Com -> c c c c ... c ;) Формирование и передача 
                             HEX блока. c - байт из поля данных 
                             (не более 80 штук)

                             пример 0x1234 00 sendhex 0xFE 0x12 1 2 3 ;                              
#

